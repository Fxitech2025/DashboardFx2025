plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13' // here // 0.0.10
    id 'org.beryx.jlink' version '2.25.0' // here // 2.24.1
}

group 'io.github.gleidsonmt.dashboardfx'
version '1.0.5'

repositories {
    mavenCentral()
    maven {
//        url 'https://jitpack.io',
        url "https://sandec.jfrog.io/artifactory/repo"
    }
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

ext {
    junitVersion = '5.8.2'
}

application {
    mainModule = 'io.github.gleidsonmt.dashboardfx'
    mainClass = 'io.github.gleidsonmt.dashboardfx.Starter'
}

javafx {
    version = '18.0.2' // here 18
    modules = ['javafx.controls',
               'javafx.fxml',
               'javafx.web',
               'javafx.graphics',
               'javafx.media',
               "javafx.swing"]
}

dependencies {

    implementation 'org.yaml:snakeyaml:1.33'
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation files('vendor/animatefx-1.2.0.jar')

    implementation 'org.kordamp.ikonli:ikonli-material-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-material2-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-core:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'

    implementation 'fr.brouillard.oss:cssfx:11.5.1' // Special lib to vizualize css when app is running.. so amazing!

    implementation group: 'com.dlsc.gemsfx', name: 'gemsfx', version: '1.82.0'
    implementation files('vendor/GNAvatarView-1.0.5.jar')

    implementation 'org.controlsfx:controlsfx:11.1.2'

//    implementation 'org.commonmark:commonmark:0.20.0'
//    implementation files('vendor/GNControls-1.2.5.jar')

// Here only for tests

//    implementation files('vendor/gndecorator-2.2.31.jar')     // Decorator lib for custom windows

//    implementation files('vendor/scenicView.jar')          // thta's scenic view using jfx 8.. i need to updgrade.. this is essential for view all nodes in process
//    implementation files('vendor/controlsfx-8.40.17.jar') // My favorite lib.. has a lot of functionality

//    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
//    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

//test {
//    useJUnitPlatform()
//}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'DashboardFx'
    }

    jpackage {
        installerOptions += [
                '--verbose',
                '--description', "Software Example of theming and controls view.",
                "--vendor", "Gleidson Technology",
                "--app-version", "0.1.1",
                '--copyright', 'Copyrigth Â© 2023 Gleidson Neves'
//                , '--icon', 'logo_200.ico'
        ]

        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            println "Platform Windows"
            installerOptions += [
                    '--win-menu',
                    '--win-shortcut',
                    '--type', 'exe'
            ]
        } else {
            println "Platform Mac"
            installerOptions += [
                    '--name', 'app',
                    "--mac-package-identifier", "app",
                    "--app-version", "0.0.114",
                    '--type', 'pkg'
            ]
        }
        addExtraDependencies("javafx")
    }
}

jlinkZip {
    group = 'distribution'
}

//jar {
//
////    duplicatesStrategy = DuplicatesStrategy.WARN
//    setDuplicatesStrategy(DuplicatesStrategy.WARN)
//
//    manifest {
//        attributes(
//                'Main-Class': 'io.github.gleidsonmt.dashboardfx.Starter'
//        )
//    }
//    from {
//        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}

task runWithExecJarExecutable(type: Exec) {
    dependsOn jar
    group = "io.github.gleidsonmt"
    description = "Run the output executable jar with ExecTask"
    commandLine "java", "-jar", jar.archiveFile.get()
}